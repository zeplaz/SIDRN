{74,74,255} = Radio
{201,231,110} = Armor_med01
{255,255,0}= Engine
{73,82,47} = ARMOR_hevy01
{54,84,48} = Armor_hev02
{255,43,0} = firepoint
{255,0,255} = tracks


class Inventory
{

}
bool load_muntions()
{
  //checkinventoy
  //load
}

class Munitions_inventory
{   #define MAX_TYPE_INVTR 256;
    double total_mass;
    double Num_Types;
    std::vector<munitions> Primary_mun
    uint16_t quanity;
    uint16_t  Primary_munitons[MAX_TYPE_INVTR][]

  std::vector<munitions> Primary_munitons;
}

class munitions
{ public :

  munitions() {}
  ~munitions(){}

  virtual int status();
    virtual void deployed();
  struct muntion_varity
   {
    int type_id;
    double mass;
    uint16_t Mu_condition;
  };

}

class shells_105_Nap : public munitions
{
  shells_105_Nap(){}
  ~shells_105_Nap(){}

  int status();
  void deployed();

}

class fire_system
{
  public :
  fire_system(): Main_system(nullptr), other_systems(nullptr){}
  ~fire_system(): delete Main_system; delete other_systems;
    void fire_cmd_main()
      {

      if(Main_system) primary->onFire();
      }

    void Select_munition_type(int Mu_type);

    private :
    uint16_t  Fs_condtion;
    Munitions_inventory Fs_Mu_invtr;




}
class entity {

};

class rendered_entity: public entity{

virtual void draw() = 0;
};


class Producer {

};


class Factory: public producer,  public rendered_entity {


}


double x_velocity, y_x_velocity,z_x_velocity;
x_velocity = speed*cos(Angle);
y_velocity = speed*sin(Angle);

{ calcuatore_basic_velosty_ajuster( double time, double velocity_vec)
 double constz = ;
    velocity_vec =  time* constz;

}
bool check_collitionz();
