
https://github.com/ceccoemi/MeanShift/blob/master/MeanShift/ClustersBuilder.hpp
https://github.com/mattnedrich/MeanShift_cpp
https://github.com/bbbbyang/Mean-Shift-Segmentation
https://github.com/liaoxl/MeanShiftImageProcessor
class Vistsion_compontz{

virtual ~Vistsion_compontz() =0;

}



class mean_shift_vision : public  Vistsion_compontz
{
  public :

   ~mean_shift_vision()
    {remove_comp();};

   mean_shift_vision()
     { registar_comp(); };


    epanechnikov_



    double  MeanShift::epanechnikov_lenz((Vrt_mask &kernal_in);
    {
        // epanechnikov function : formula ( 12 ) in the paper
        //  |-  param * (1 - x)  , x<1
        //      k(x) = |  |-  0

        int height = kernal_in.rows;
        int width = kernal_in.cols;

        double epanechnikov_cal_c = 0.1*PI*height*width;
        double kernel_sum = 0.0;
        for(int i=0;i<height;i++)
        {
            for(int j=0;j<width;j++)
            {
                double x = static_cast<double>(i - h/2);
                double  y = static_cast<double> (j - w/2);

                double norm_x = x*x/(height*height/4)+y*y/(width*width/4);

                double result = norm_x<1?(epanechnikov_cal_c*(1.0-norm_x)):0;

                kernel.at<double>(i,j) = result;

                k_sum += result;
            }
        }
    return k_sum;
    }

   protected:

   registar_comp();
   remove_comp();


friend class image_procczor_mrk_1022;

};

//notes mean_shift_vis
// epanechnikov function :   formula ( 12 ) in the paper
  //                   |-  param * (1 - x)  , x<1
  //      k(x) = |
//                   |-  0                             otherwise
